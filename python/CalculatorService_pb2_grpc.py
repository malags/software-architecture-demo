# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import CalculatorService_pb2 as CalculatorService__pb2


class CalculatorServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
                '/CalculatorPackage.CalculatorService/add',
                request_serializer=CalculatorService__pb2.MyNumbers.SerializeToString,
                response_deserializer=CalculatorService__pb2.MyNumber.FromString,
                )
        self.fibonacci = channel.unary_stream(
                '/CalculatorPackage.CalculatorService/fibonacci',
                request_serializer=CalculatorService__pb2.Nothing.SerializeToString,
                response_deserializer=CalculatorService__pb2.MyNumber.FromString,
                )
        self.waitSomeTime = channel.unary_unary(
                '/CalculatorPackage.CalculatorService/waitSomeTime',
                request_serializer=CalculatorService__pb2.Nothing.SerializeToString,
                response_deserializer=CalculatorService__pb2.Nothing.FromString,
                )
        self.fibonacciServerCrash = channel.unary_stream(
                '/CalculatorPackage.CalculatorService/fibonacciServerCrash',
                request_serializer=CalculatorService__pb2.Nothing.SerializeToString,
                response_deserializer=CalculatorService__pb2.MyNumber.FromString,
                )


class CalculatorServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def add(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fibonacci(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def waitSomeTime(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fibonacciServerCrash(self, request, context):
        """add
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add': grpc.unary_unary_rpc_method_handler(
                    servicer.add,
                    request_deserializer=CalculatorService__pb2.MyNumbers.FromString,
                    response_serializer=CalculatorService__pb2.MyNumber.SerializeToString,
            ),
            'fibonacci': grpc.unary_stream_rpc_method_handler(
                    servicer.fibonacci,
                    request_deserializer=CalculatorService__pb2.Nothing.FromString,
                    response_serializer=CalculatorService__pb2.MyNumber.SerializeToString,
            ),
            'waitSomeTime': grpc.unary_unary_rpc_method_handler(
                    servicer.waitSomeTime,
                    request_deserializer=CalculatorService__pb2.Nothing.FromString,
                    response_serializer=CalculatorService__pb2.Nothing.SerializeToString,
            ),
            'fibonacciServerCrash': grpc.unary_stream_rpc_method_handler(
                    servicer.fibonacciServerCrash,
                    request_deserializer=CalculatorService__pb2.Nothing.FromString,
                    response_serializer=CalculatorService__pb2.MyNumber.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CalculatorPackage.CalculatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalculatorService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CalculatorPackage.CalculatorService/add',
            CalculatorService__pb2.MyNumbers.SerializeToString,
            CalculatorService__pb2.MyNumber.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fibonacci(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CalculatorPackage.CalculatorService/fibonacci',
            CalculatorService__pb2.Nothing.SerializeToString,
            CalculatorService__pb2.MyNumber.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def waitSomeTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CalculatorPackage.CalculatorService/waitSomeTime',
            CalculatorService__pb2.Nothing.SerializeToString,
            CalculatorService__pb2.Nothing.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fibonacciServerCrash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CalculatorPackage.CalculatorService/fibonacciServerCrash',
            CalculatorService__pb2.Nothing.SerializeToString,
            CalculatorService__pb2.MyNumber.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
